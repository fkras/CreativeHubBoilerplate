// ==== HELPERS ==== //

// Breakpoints
$break-small: 768px;
$break-medium: 992px;
$break-large: 1200px;
$break-xlarge: 1200px;

$break-smartphone: 767px;
$break-desktop: 1200px;

/*
This .scss loop will create "margin helpers" and "padding helpers".
It will generate several classes such as:
.mr-xs-10 which gives margin-right 10 pixels for all media widths.
.mr-sm-15 gives MARGIN to the RIGHT 15 pixels for media widths $break-small and above.
.mt-md-15 gives MARGIN to the TOP 15 pixels and so on for media widths $break-medium and above.
same rules apply to PADDINGs as well
.pb-xs-5 gives PADDING to the BOTTOM of 5 pixels for all media widths
.pl-sm-40 gives PADDING to the LEFT of 40 pixels for media widths $break-small and above
The first letter is "m" or "p" for MARGIN or PADDING
Second letter is "t", "b", "l", or "r" for TOP, BOTTOM, LEFT, or RIGHT
if the second letter is "x" it'll apply for LEFT and RIGHT,
if the second letter is "y" it'll apply for TOP and BOTTOM,
if no second letter is provided it'll apply for all sides, TOP, RIGHT, BOTTOM, LEFT
Third letter is the number of spacing in pixels. Adjust the amounts generated by editing the $spaceamounts variable below.
*/

$spaceamounts: ();
@for $i from -100 through 100 {
  //generates numbers from -100 to 100 with decrements of 5, and from -10 to 10 with all the numbers in between
  @if ($i % 5 == 0 or ($i > -10 and $i < 10)) {
    $spaceamounts: append($spaceamounts, $i, comma);
  }
}

$sides: (top, bottom, left, right, "x", "y", "all");
$mediaWidth: (
  $break-small: "sm",
  $break-medium: "md",
  $break-large: "lg",
);
@mixin paddingAndMarginGenerator($space, $side, $short) {
  @if $side == "x" {
    .mx-#{$short}-#{$space} {
      margin-left: #{$space}px !important;
      margin-right: #{$space}px !important;
    }
    .px-#{$short}-#{$space} {
      padding-left: #{$space}px !important;
      padding-right: #{$space}px !important;
    }
  } @else if $side == "y" {
    .my-#{$short}-#{$space} {
      margin-top: #{$space}px !important;
      margin-bottom: #{$space}px !important;
    }
    .py-#{$short}-#{$space} {
      padding-top: #{$space}px !important;
      padding-bottom: #{$space}px !important;
    }
  } @else if $side == "all" {
    .m-#{$short}-#{$space} {
      margin-left: #{$space}px !important;
      margin-right: #{$space}px !important;
      margin-top: #{$space}px !important;
      margin-bottom: #{$space}px !important;
    }
    .p-#{$short}-#{$space} {
      padding-left: #{$space}px !important;
      padding-right: #{$space}px !important;
      padding-top: #{$space}px !important;
      padding-bottom: #{$space}px !important;
    }
  } @else {
    .m#{str-slice($side, 0, 1)}-#{$short}-#{$space} {
      margin-#{$side}: #{$space}px !important;
    }

    .p#{str-slice($side, 0, 1)}-#{$short}-#{$space} {
      padding-#{$side}: #{$space}px !important;
    }
  }
}

//generates Helper classes for PADDING and MARGIN for all $break-points
@each $space in $spaceamounts {
  @each $side in $sides {
    @include paddingAndMarginGenerator($space, $side, "xs");
  }
}

//generates Helper classes for PADDING and MARGIN only for the $break-points listet in the $mediaWidth list
@each $break, $short in $mediaWidth {
  @media (min-width: #{$break}) {
    @each $space in $spaceamounts {
      @each $side in $sides {
        @include paddingAndMarginGenerator($space, $side, $short);
      }
    }
  }
}

@each $break, $short in $mediaWidth {
  @media (max-width: #{$break}) {
    .col-#{$short}-flex {
      display: flex !important;
    }

    .col-#{$short}-left {
      text-align: left;
    }

    .col-#{$short}-right {
      text-align: right;
    }

    .col-#{$short}-center {
      text-align: center;
    }

    .col-#{$short}-inblock {
      display: inline-block !important;
    }

    .col-#{$short}-block {
      display: block !important;
    }

    .col-#{$short}-hide {
      display: none !important;
    }
  }
}